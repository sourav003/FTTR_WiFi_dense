//
// Generated file, do not edit! Created by opp_msgtool 6.0 from trigger_bsr.msg.
//

#ifndef __TRIGGER_BSR_M_H
#define __TRIGGER_BSR_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class trigger_bsr;
/**
 * Class generated from <tt>trigger_bsr.msg:17</tt> by opp_msgtool.
 * <pre>
 * packet trigger_bsr extends cPacket
 * {
 *     double Throughput;
 *     double BW_alloc;
 *     double TX_time;
 * 
 *     string STA_band_pref;
 *     double STA_buffer_size;
 * }
 * </pre>
 */
class trigger_bsr : public ::omnetpp::cPacket
{
  protected:
    double Throughput = 0;
    double BW_alloc = 0;
    double TX_time = 0;
    omnetpp::opp_string STA_band_pref;
    double STA_buffer_size = 0;

  private:
    void copy(const trigger_bsr& other);

  protected:
    bool operator==(const trigger_bsr&) = delete;

  public:
    trigger_bsr(const char *name=nullptr, short kind=0);
    trigger_bsr(const trigger_bsr& other);
    virtual ~trigger_bsr();
    trigger_bsr& operator=(const trigger_bsr& other);
    virtual trigger_bsr *dup() const override {return new trigger_bsr(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual double getThroughput() const;
    virtual void setThroughput(double Throughput);

    virtual double getBW_alloc() const;
    virtual void setBW_alloc(double BW_alloc);

    virtual double getTX_time() const;
    virtual void setTX_time(double TX_time);

    virtual const char * getSTA_band_pref() const;
    virtual void setSTA_band_pref(const char * STA_band_pref);

    virtual double getSTA_buffer_size() const;
    virtual void setSTA_buffer_size(double STA_buffer_size);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const trigger_bsr& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, trigger_bsr& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline trigger_bsr *fromAnyPtr(any_ptr ptr) { return check_and_cast<trigger_bsr*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TRIGGER_BSR_M_H

