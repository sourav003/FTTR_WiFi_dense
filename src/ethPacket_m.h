//
// Generated file, do not edit! Created by opp_msgtool 6.0 from ethPacket.msg.
//

#ifndef __ETHPACKET_M_H
#define __ETHPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ethPacket;
/**
 * Class generated from <tt>ethPacket.msg:17</tt> by opp_msgtool.
 * <pre>
 * packet ethPacket extends cPacket
 * {
 *     simtime_t GenerationTime;
 *     simtime_t WapArrivalTime;
 *     simtime_t WapDepartureTime;
 *     simtime_t SfuArrivalTime;
 *     simtime_t SfuDepartureTime;
 *     simtime_t OnuArrivalTime;
 *     simtime_t OnuDepartureTime;
 *     //simtime_t OltArrivalTime;
 * 
 *     int OnuId;							// intended receipient ONU
 *     int SfuId;
 *     int MfuId;
 *     int TContId;						// T-CONT type
 *     int FragmentCount = 0;				// id of fragmented packet
 * }
 * </pre>
 */
class ethPacket : public ::omnetpp::cPacket
{
  protected:
    omnetpp::simtime_t GenerationTime = SIMTIME_ZERO;
    omnetpp::simtime_t WapArrivalTime = SIMTIME_ZERO;
    omnetpp::simtime_t WapDepartureTime = SIMTIME_ZERO;
    omnetpp::simtime_t SfuArrivalTime = SIMTIME_ZERO;
    omnetpp::simtime_t SfuDepartureTime = SIMTIME_ZERO;
    omnetpp::simtime_t OnuArrivalTime = SIMTIME_ZERO;
    omnetpp::simtime_t OnuDepartureTime = SIMTIME_ZERO;
    int OnuId = 0;
    int SfuId = 0;
    int MfuId = 0;
    int TContId = 0;
    int FragmentCount = 0;

  private:
    void copy(const ethPacket& other);

  protected:
    bool operator==(const ethPacket&) = delete;

  public:
    ethPacket(const char *name=nullptr, short kind=0);
    ethPacket(const ethPacket& other);
    virtual ~ethPacket();
    ethPacket& operator=(const ethPacket& other);
    virtual ethPacket *dup() const override {return new ethPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual omnetpp::simtime_t getGenerationTime() const;
    virtual void setGenerationTime(omnetpp::simtime_t GenerationTime);

    virtual omnetpp::simtime_t getWapArrivalTime() const;
    virtual void setWapArrivalTime(omnetpp::simtime_t WapArrivalTime);

    virtual omnetpp::simtime_t getWapDepartureTime() const;
    virtual void setWapDepartureTime(omnetpp::simtime_t WapDepartureTime);

    virtual omnetpp::simtime_t getSfuArrivalTime() const;
    virtual void setSfuArrivalTime(omnetpp::simtime_t SfuArrivalTime);

    virtual omnetpp::simtime_t getSfuDepartureTime() const;
    virtual void setSfuDepartureTime(omnetpp::simtime_t SfuDepartureTime);

    virtual omnetpp::simtime_t getOnuArrivalTime() const;
    virtual void setOnuArrivalTime(omnetpp::simtime_t OnuArrivalTime);

    virtual omnetpp::simtime_t getOnuDepartureTime() const;
    virtual void setOnuDepartureTime(omnetpp::simtime_t OnuDepartureTime);

    virtual int getOnuId() const;
    virtual void setOnuId(int OnuId);

    virtual int getSfuId() const;
    virtual void setSfuId(int SfuId);

    virtual int getMfuId() const;
    virtual void setMfuId(int MfuId);

    virtual int getTContId() const;
    virtual void setTContId(int TContId);

    virtual int getFragmentCount() const;
    virtual void setFragmentCount(int FragmentCount);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ethPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ethPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ethPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<ethPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __ETHPACKET_M_H

